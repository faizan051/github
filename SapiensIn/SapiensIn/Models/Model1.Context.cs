//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SapiensIn.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment_Proceedings> Appointment_Proceedings { get; set; }
        public virtual DbSet<DiscountVouchers> DiscountVouchers { get; set; }
        public virtual DbSet<Labs> Labs { get; set; }
        public virtual DbSet<LabTests> LabTests { get; set; }
        public virtual DbSet<Medicines> Medicines { get; set; }
        public virtual DbSet<Patient_Appointments> Patient_Appointments { get; set; }
        public virtual DbSet<Patient_LabTests> Patient_LabTests { get; set; }
        public virtual DbSet<Patient_MedicineOrder> Patient_MedicineOrder { get; set; }
        public virtual DbSet<Patient_Medicines> Patient_Medicines { get; set; }
        public virtual DbSet<RatingAndReviews> RatingAndReviews { get; set; }
        public virtual DbSet<Specialities> Specialities { get; set; }
        public virtual DbSet<Team_TimeSlots> Team_TimeSlots { get; set; }
        public virtual DbSet<TeamMembers> TeamMembers { get; set; }
        public virtual DbSet<Teams> Teams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UserTypes> UserTypes { get; set; }
    
        public virtual int f_HELPER_PROCEDURE_CLEAN_DB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_HELPER_PROCEDURE_CLEAN_DB");
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_DISCOUNT_VOUCHERS(Nullable<int> discountVoucherID, string voucherTitle, string voucherCode, string voucherDecription, string voucherImage, Nullable<double> discountPercentage, Nullable<decimal> discountAmount, Nullable<bool> isLabApplicable, Nullable<bool> isMedicineApplicable, Nullable<bool> isAppointmentApplicable, Nullable<bool> isEnabled, Nullable<bool> status)
        {
            var discountVoucherIDParameter = discountVoucherID.HasValue ?
                new ObjectParameter("DiscountVoucherID", discountVoucherID) :
                new ObjectParameter("DiscountVoucherID", typeof(int));
    
            var voucherTitleParameter = voucherTitle != null ?
                new ObjectParameter("VoucherTitle", voucherTitle) :
                new ObjectParameter("VoucherTitle", typeof(string));
    
            var voucherCodeParameter = voucherCode != null ?
                new ObjectParameter("VoucherCode", voucherCode) :
                new ObjectParameter("VoucherCode", typeof(string));
    
            var voucherDecriptionParameter = voucherDecription != null ?
                new ObjectParameter("VoucherDecription", voucherDecription) :
                new ObjectParameter("VoucherDecription", typeof(string));
    
            var voucherImageParameter = voucherImage != null ?
                new ObjectParameter("VoucherImage", voucherImage) :
                new ObjectParameter("VoucherImage", typeof(string));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(decimal));
    
            var isLabApplicableParameter = isLabApplicable.HasValue ?
                new ObjectParameter("IsLabApplicable", isLabApplicable) :
                new ObjectParameter("IsLabApplicable", typeof(bool));
    
            var isMedicineApplicableParameter = isMedicineApplicable.HasValue ?
                new ObjectParameter("IsMedicineApplicable", isMedicineApplicable) :
                new ObjectParameter("IsMedicineApplicable", typeof(bool));
    
            var isAppointmentApplicableParameter = isAppointmentApplicable.HasValue ?
                new ObjectParameter("IsAppointmentApplicable", isAppointmentApplicable) :
                new ObjectParameter("IsAppointmentApplicable", typeof(bool));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_DISCOUNT_VOUCHERS", discountVoucherIDParameter, voucherTitleParameter, voucherCodeParameter, voucherDecriptionParameter, voucherImageParameter, discountPercentageParameter, discountAmountParameter, isLabApplicableParameter, isMedicineApplicableParameter, isAppointmentApplicableParameter, isEnabledParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_LAB_TESTS(Nullable<int> labTestID, string labTestTitle, Nullable<decimal> labTestPrice, Nullable<bool> status)
        {
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var labTestTitleParameter = labTestTitle != null ?
                new ObjectParameter("LabTestTitle", labTestTitle) :
                new ObjectParameter("LabTestTitle", typeof(string));
    
            var labTestPriceParameter = labTestPrice.HasValue ?
                new ObjectParameter("LabTestPrice", labTestPrice) :
                new ObjectParameter("LabTestPrice", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_LAB_TESTS", labTestIDParameter, labTestTitleParameter, labTestPriceParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_LABS(Nullable<int> labID, string labTitle, string displayPicture, Nullable<double> discountPercentage, Nullable<bool> status)
        {
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            var labTitleParameter = labTitle != null ?
                new ObjectParameter("LabTitle", labTitle) :
                new ObjectParameter("LabTitle", typeof(string));
    
            var displayPictureParameter = displayPicture != null ?
                new ObjectParameter("DisplayPicture", displayPicture) :
                new ObjectParameter("DisplayPicture", typeof(string));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_LABS", labIDParameter, labTitleParameter, displayPictureParameter, discountPercentageParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_MEDICINES(Nullable<int> medicineID, string medicineTitle, string displayPicture, Nullable<decimal> price, Nullable<bool> status)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var medicineTitleParameter = medicineTitle != null ?
                new ObjectParameter("MedicineTitle", medicineTitle) :
                new ObjectParameter("MedicineTitle", typeof(string));
    
            var displayPictureParameter = displayPicture != null ?
                new ObjectParameter("DisplayPicture", displayPicture) :
                new ObjectParameter("DisplayPicture", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_MEDICINES", medicineIDParameter, medicineTitleParameter, displayPictureParameter, priceParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_PATIENT_APPOINTMENT_PROCEEDINGS(Nullable<long> appointmentProceedingID, Nullable<long> appointmentID, Nullable<long> userID, Nullable<int> senderUserTypeID, Nullable<int> receiverUserTypeID, string attachmentFileName, string comment, Nullable<bool> status)
        {
            var appointmentProceedingIDParameter = appointmentProceedingID.HasValue ?
                new ObjectParameter("AppointmentProceedingID", appointmentProceedingID) :
                new ObjectParameter("AppointmentProceedingID", typeof(long));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var senderUserTypeIDParameter = senderUserTypeID.HasValue ?
                new ObjectParameter("SenderUserTypeID", senderUserTypeID) :
                new ObjectParameter("SenderUserTypeID", typeof(int));
    
            var receiverUserTypeIDParameter = receiverUserTypeID.HasValue ?
                new ObjectParameter("ReceiverUserTypeID", receiverUserTypeID) :
                new ObjectParameter("ReceiverUserTypeID", typeof(int));
    
            var attachmentFileNameParameter = attachmentFileName != null ?
                new ObjectParameter("AttachmentFileName", attachmentFileName) :
                new ObjectParameter("AttachmentFileName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_PATIENT_APPOINTMENT_PROCEEDINGS", appointmentProceedingIDParameter, appointmentIDParameter, userIDParameter, senderUserTypeIDParameter, receiverUserTypeIDParameter, attachmentFileNameParameter, commentParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_PATIENT_APPOINTMENTS(Nullable<long> appointmentID, Nullable<long> userID, Nullable<int> teamID, Nullable<decimal> sessionCharges, Nullable<System.DateTime> sessionStartDate, Nullable<System.TimeSpan> sessionStartTime, Nullable<int> teamTimeSlotID, Nullable<bool> isSessionEnded, Nullable<System.DateTime> sessionEndDatetime, string paymentImage, string billingAddress, Nullable<int> discountVoucherID, string voucherTitle, Nullable<double> discountVoucherPercentage, Nullable<decimal> discountVoucherAmount, Nullable<decimal> finalAmount, Nullable<bool> status)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var sessionChargesParameter = sessionCharges.HasValue ?
                new ObjectParameter("SessionCharges", sessionCharges) :
                new ObjectParameter("SessionCharges", typeof(decimal));
    
            var sessionStartDateParameter = sessionStartDate.HasValue ?
                new ObjectParameter("SessionStartDate", sessionStartDate) :
                new ObjectParameter("SessionStartDate", typeof(System.DateTime));
    
            var sessionStartTimeParameter = sessionStartTime.HasValue ?
                new ObjectParameter("SessionStartTime", sessionStartTime) :
                new ObjectParameter("SessionStartTime", typeof(System.TimeSpan));
    
            var teamTimeSlotIDParameter = teamTimeSlotID.HasValue ?
                new ObjectParameter("TeamTimeSlotID", teamTimeSlotID) :
                new ObjectParameter("TeamTimeSlotID", typeof(int));
    
            var isSessionEndedParameter = isSessionEnded.HasValue ?
                new ObjectParameter("IsSessionEnded", isSessionEnded) :
                new ObjectParameter("IsSessionEnded", typeof(bool));
    
            var sessionEndDatetimeParameter = sessionEndDatetime.HasValue ?
                new ObjectParameter("SessionEndDatetime", sessionEndDatetime) :
                new ObjectParameter("SessionEndDatetime", typeof(System.DateTime));
    
            var paymentImageParameter = paymentImage != null ?
                new ObjectParameter("PaymentImage", paymentImage) :
                new ObjectParameter("PaymentImage", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var discountVoucherIDParameter = discountVoucherID.HasValue ?
                new ObjectParameter("DiscountVoucherID", discountVoucherID) :
                new ObjectParameter("DiscountVoucherID", typeof(int));
    
            var voucherTitleParameter = voucherTitle != null ?
                new ObjectParameter("VoucherTitle", voucherTitle) :
                new ObjectParameter("VoucherTitle", typeof(string));
    
            var discountVoucherPercentageParameter = discountVoucherPercentage.HasValue ?
                new ObjectParameter("DiscountVoucherPercentage", discountVoucherPercentage) :
                new ObjectParameter("DiscountVoucherPercentage", typeof(double));
    
            var discountVoucherAmountParameter = discountVoucherAmount.HasValue ?
                new ObjectParameter("DiscountVoucherAmount", discountVoucherAmount) :
                new ObjectParameter("DiscountVoucherAmount", typeof(decimal));
    
            var finalAmountParameter = finalAmount.HasValue ?
                new ObjectParameter("FinalAmount", finalAmount) :
                new ObjectParameter("FinalAmount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_PATIENT_APPOINTMENTS", appointmentIDParameter, userIDParameter, teamIDParameter, sessionChargesParameter, sessionStartDateParameter, sessionStartTimeParameter, teamTimeSlotIDParameter, isSessionEndedParameter, sessionEndDatetimeParameter, paymentImageParameter, billingAddressParameter, discountVoucherIDParameter, voucherTitleParameter, discountVoucherPercentageParameter, discountVoucherAmountParameter, finalAmountParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_PATIENT_LAB_TESTS(Nullable<long> patientLabTestID, Nullable<int> labID, Nullable<int> labTestID, Nullable<long> userID, Nullable<long> appointmentID, Nullable<double> discountPercentage, Nullable<decimal> labTestPrice, Nullable<decimal> finalAmount, string labResultFileAttachment, string paymentImage, string billingAddress, Nullable<int> discountVoucherID, string voucherTitle, Nullable<double> discountVoucherPercentage, Nullable<decimal> discountVoucherAmount, Nullable<bool> status)
        {
            var patientLabTestIDParameter = patientLabTestID.HasValue ?
                new ObjectParameter("PatientLabTestID", patientLabTestID) :
                new ObjectParameter("PatientLabTestID", typeof(long));
    
            var labIDParameter = labID.HasValue ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(int));
    
            var labTestIDParameter = labTestID.HasValue ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var discountPercentageParameter = discountPercentage.HasValue ?
                new ObjectParameter("DiscountPercentage", discountPercentage) :
                new ObjectParameter("DiscountPercentage", typeof(double));
    
            var labTestPriceParameter = labTestPrice.HasValue ?
                new ObjectParameter("LabTestPrice", labTestPrice) :
                new ObjectParameter("LabTestPrice", typeof(decimal));
    
            var finalAmountParameter = finalAmount.HasValue ?
                new ObjectParameter("FinalAmount", finalAmount) :
                new ObjectParameter("FinalAmount", typeof(decimal));
    
            var labResultFileAttachmentParameter = labResultFileAttachment != null ?
                new ObjectParameter("LabResultFileAttachment", labResultFileAttachment) :
                new ObjectParameter("LabResultFileAttachment", typeof(string));
    
            var paymentImageParameter = paymentImage != null ?
                new ObjectParameter("PaymentImage", paymentImage) :
                new ObjectParameter("PaymentImage", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var discountVoucherIDParameter = discountVoucherID.HasValue ?
                new ObjectParameter("DiscountVoucherID", discountVoucherID) :
                new ObjectParameter("DiscountVoucherID", typeof(int));
    
            var voucherTitleParameter = voucherTitle != null ?
                new ObjectParameter("VoucherTitle", voucherTitle) :
                new ObjectParameter("VoucherTitle", typeof(string));
    
            var discountVoucherPercentageParameter = discountVoucherPercentage.HasValue ?
                new ObjectParameter("DiscountVoucherPercentage", discountVoucherPercentage) :
                new ObjectParameter("DiscountVoucherPercentage", typeof(double));
    
            var discountVoucherAmountParameter = discountVoucherAmount.HasValue ?
                new ObjectParameter("DiscountVoucherAmount", discountVoucherAmount) :
                new ObjectParameter("DiscountVoucherAmount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_PATIENT_LAB_TESTS", patientLabTestIDParameter, labIDParameter, labTestIDParameter, userIDParameter, appointmentIDParameter, discountPercentageParameter, labTestPriceParameter, finalAmountParameter, labResultFileAttachmentParameter, paymentImageParameter, billingAddressParameter, discountVoucherIDParameter, voucherTitleParameter, discountVoucherPercentageParameter, discountVoucherAmountParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_PATIENT_MEDICINE_ORDER(Nullable<long> patientMedicineOrderID, string orderNumber, string prescriptionImage, Nullable<long> userID, Nullable<long> appointmentID, Nullable<decimal> finalAmount, string paymentImage, string billingAddress, Nullable<System.DateTime> orderDate, Nullable<int> discountVoucherID, string voucherTitle, Nullable<double> discountVoucherPercentage, Nullable<decimal> discountVoucherAmount, Nullable<bool> status)
        {
            var patientMedicineOrderIDParameter = patientMedicineOrderID.HasValue ?
                new ObjectParameter("PatientMedicineOrderID", patientMedicineOrderID) :
                new ObjectParameter("PatientMedicineOrderID", typeof(long));
    
            var orderNumberParameter = orderNumber != null ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(string));
    
            var prescriptionImageParameter = prescriptionImage != null ?
                new ObjectParameter("PrescriptionImage", prescriptionImage) :
                new ObjectParameter("PrescriptionImage", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var finalAmountParameter = finalAmount.HasValue ?
                new ObjectParameter("FinalAmount", finalAmount) :
                new ObjectParameter("FinalAmount", typeof(decimal));
    
            var paymentImageParameter = paymentImage != null ?
                new ObjectParameter("PaymentImage", paymentImage) :
                new ObjectParameter("PaymentImage", typeof(string));
    
            var billingAddressParameter = billingAddress != null ?
                new ObjectParameter("BillingAddress", billingAddress) :
                new ObjectParameter("BillingAddress", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var discountVoucherIDParameter = discountVoucherID.HasValue ?
                new ObjectParameter("DiscountVoucherID", discountVoucherID) :
                new ObjectParameter("DiscountVoucherID", typeof(int));
    
            var voucherTitleParameter = voucherTitle != null ?
                new ObjectParameter("VoucherTitle", voucherTitle) :
                new ObjectParameter("VoucherTitle", typeof(string));
    
            var discountVoucherPercentageParameter = discountVoucherPercentage.HasValue ?
                new ObjectParameter("DiscountVoucherPercentage", discountVoucherPercentage) :
                new ObjectParameter("DiscountVoucherPercentage", typeof(double));
    
            var discountVoucherAmountParameter = discountVoucherAmount.HasValue ?
                new ObjectParameter("DiscountVoucherAmount", discountVoucherAmount) :
                new ObjectParameter("DiscountVoucherAmount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_PATIENT_MEDICINE_ORDER", patientMedicineOrderIDParameter, orderNumberParameter, prescriptionImageParameter, userIDParameter, appointmentIDParameter, finalAmountParameter, paymentImageParameter, billingAddressParameter, orderDateParameter, discountVoucherIDParameter, voucherTitleParameter, discountVoucherPercentageParameter, discountVoucherAmountParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_PATIENT_MEDICINE_ORDER_DETAILS(Nullable<long> patientMedicineID, Nullable<long> patientMedicineOrderID, Nullable<int> medicineID, Nullable<int> quantity, Nullable<decimal> unitPrice, Nullable<decimal> totalPrice, Nullable<bool> status)
        {
            var patientMedicineIDParameter = patientMedicineID.HasValue ?
                new ObjectParameter("PatientMedicineID", patientMedicineID) :
                new ObjectParameter("PatientMedicineID", typeof(long));
    
            var patientMedicineOrderIDParameter = patientMedicineOrderID.HasValue ?
                new ObjectParameter("PatientMedicineOrderID", patientMedicineOrderID) :
                new ObjectParameter("PatientMedicineOrderID", typeof(long));
    
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("MedicineID", medicineID) :
                new ObjectParameter("MedicineID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_PATIENT_MEDICINE_ORDER_DETAILS", patientMedicineIDParameter, patientMedicineOrderIDParameter, medicineIDParameter, quantityParameter, unitPriceParameter, totalPriceParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_RATING_AND_REVIEW(Nullable<long> ratingReviewID, Nullable<double> rating, string reviewStatement, Nullable<long> userID, Nullable<int> teamID, Nullable<bool> status)
        {
            var ratingReviewIDParameter = ratingReviewID.HasValue ?
                new ObjectParameter("RatingReviewID", ratingReviewID) :
                new ObjectParameter("RatingReviewID", typeof(long));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(double));
    
            var reviewStatementParameter = reviewStatement != null ?
                new ObjectParameter("ReviewStatement", reviewStatement) :
                new ObjectParameter("ReviewStatement", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_RATING_AND_REVIEW", ratingReviewIDParameter, ratingParameter, reviewStatementParameter, userIDParameter, teamIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_SPECIALITIES(Nullable<int> specialityID, string specialityTitle, string displayPicture, Nullable<bool> status)
        {
            var specialityIDParameter = specialityID.HasValue ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(int));
    
            var specialityTitleParameter = specialityTitle != null ?
                new ObjectParameter("SpecialityTitle", specialityTitle) :
                new ObjectParameter("SpecialityTitle", typeof(string));
    
            var displayPictureParameter = displayPicture != null ?
                new ObjectParameter("DisplayPicture", displayPicture) :
                new ObjectParameter("DisplayPicture", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_SPECIALITIES", specialityIDParameter, specialityTitleParameter, displayPictureParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_TEAM_MEMBERS(Nullable<long> teamMemberID, Nullable<int> teamID, Nullable<long> userID, Nullable<bool> status)
        {
            var teamMemberIDParameter = teamMemberID.HasValue ?
                new ObjectParameter("TeamMemberID", teamMemberID) :
                new ObjectParameter("TeamMemberID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_TEAM_MEMBERS", teamMemberIDParameter, teamIDParameter, userIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_TEAM_TIME_SLOTS(Nullable<long> teamTimeSlotID, Nullable<int> teamID, Nullable<int> dayNumber, Nullable<System.TimeSpan> timeSlot, Nullable<bool> status)
        {
            var teamTimeSlotIDParameter = teamTimeSlotID.HasValue ?
                new ObjectParameter("TeamTimeSlotID", teamTimeSlotID) :
                new ObjectParameter("TeamTimeSlotID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var dayNumberParameter = dayNumber.HasValue ?
                new ObjectParameter("DayNumber", dayNumber) :
                new ObjectParameter("DayNumber", typeof(int));
    
            var timeSlotParameter = timeSlot.HasValue ?
                new ObjectParameter("TimeSlot", timeSlot) :
                new ObjectParameter("TimeSlot", typeof(System.TimeSpan));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_TEAM_TIME_SLOTS", teamTimeSlotIDParameter, teamIDParameter, dayNumberParameter, timeSlotParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ADD_OR_UPDATE_TEAMS(Nullable<int> teamID, string teamTitle, Nullable<int> specialityID, Nullable<decimal> sessionCharges, Nullable<bool> status)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var teamTitleParameter = teamTitle != null ?
                new ObjectParameter("TeamTitle", teamTitle) :
                new ObjectParameter("TeamTitle", typeof(string));
    
            var specialityIDParameter = specialityID.HasValue ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(int));
    
            var sessionChargesParameter = sessionCharges.HasValue ?
                new ObjectParameter("SessionCharges", sessionCharges) :
                new ObjectParameter("SessionCharges", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ADD_OR_UPDATE_TEAMS", teamIDParameter, teamTitleParameter, specialityIDParameter, sessionChargesParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> ADD_OR_UPDATE_USERS(Nullable<long> userID, string name, Nullable<int> userTypeID, Nullable<int> specialityID, string experience, Nullable<double> satisfactionPercentage, string displayPicture, string mobileNumber, string password, Nullable<bool> status, string residentialAddress, string education)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var specialityIDParameter = specialityID.HasValue ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(int));
    
            var experienceParameter = experience != null ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(string));
    
            var satisfactionPercentageParameter = satisfactionPercentage.HasValue ?
                new ObjectParameter("SatisfactionPercentage", satisfactionPercentage) :
                new ObjectParameter("SatisfactionPercentage", typeof(double));
    
            var displayPictureParameter = displayPicture != null ?
                new ObjectParameter("DisplayPicture", displayPicture) :
                new ObjectParameter("DisplayPicture", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var residentialAddressParameter = residentialAddress != null ?
                new ObjectParameter("ResidentialAddress", residentialAddress) :
                new ObjectParameter("ResidentialAddress", typeof(string));
    
            var educationParameter = education != null ?
                new ObjectParameter("Education", education) :
                new ObjectParameter("Education", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("ADD_OR_UPDATE_USERS", userIDParameter, nameParameter, userTypeIDParameter, specialityIDParameter, experienceParameter, satisfactionPercentageParameter, displayPictureParameter, mobileNumberParameter, passwordParameter, statusParameter, residentialAddressParameter, educationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CHECK_MOBILE_NUMBER_FOR_ACCOUNT_CREATION(string mobileNumber)
        {
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CHECK_MOBILE_NUMBER_FOR_ACCOUNT_CREATION", mobileNumberParameter);
        }
    
        public virtual ObjectResult<GET_ALL_LAB_TESTS_Result> GET_ALL_LAB_TESTS(string searchQuery)
        {
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ALL_LAB_TESTS_Result>("GET_ALL_LAB_TESTS", searchQueryParameter);
        }
    
        public virtual ObjectResult<GET_ALL_LABS_Result> GET_ALL_LABS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ALL_LABS_Result>("GET_ALL_LABS");
        }
    
        public virtual ObjectResult<GET_ALL_MEDICINES_Result> GET_ALL_MEDICINES(string searchQuery, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ALL_MEDICINES_Result>("GET_ALL_MEDICINES", searchQueryParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<GET_ALL_SPECIALITIES_Result> GET_ALL_SPECIALITIES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ALL_SPECIALITIES_Result>("GET_ALL_SPECIALITIES");
        }
    
        public virtual ObjectResult<GET_APPOINTMENT_PROCEEDINGS_Result> GET_APPOINTMENT_PROCEEDINGS(Nullable<long> appointmentID, Nullable<int> userTypeID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_APPOINTMENT_PROCEEDINGS_Result>("GET_APPOINTMENT_PROCEEDINGS", appointmentIDParameter, userTypeIDParameter);
        }
    
        public virtual ObjectResult<GET_APPOINTMENTS_FOR_DOCTOR_PROFILE_Result> GET_APPOINTMENTS_FOR_DOCTOR_PROFILE(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_APPOINTMENTS_FOR_DOCTOR_PROFILE_Result>("GET_APPOINTMENTS_FOR_DOCTOR_PROFILE", userIDParameter);
        }
    
        public virtual ObjectResult<GET_APPOINTMENTS_FOR_PATIENT_PROFILE_Result> GET_APPOINTMENTS_FOR_PATIENT_PROFILE(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_APPOINTMENTS_FOR_PATIENT_PROFILE_Result>("GET_APPOINTMENTS_FOR_PATIENT_PROFILE", userIDParameter);
        }
    
        public virtual ObjectResult<GET_APPOINTMENTS_REPORT_Result> GET_APPOINTMENTS_REPORT(Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string specialityID, string teamID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var specialityIDParameter = specialityID != null ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(string));
    
            var teamIDParameter = teamID != null ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_APPOINTMENTS_REPORT_Result>("GET_APPOINTMENTS_REPORT", userIDParameter, startDateParameter, endDateParameter, specialityIDParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<GET_AVAILABLE_TIME_SLOTS_BY_TEAM_ID_AND_DATE_Result> GET_AVAILABLE_TIME_SLOTS_BY_TEAM_ID_AND_DATE(Nullable<int> teamID, Nullable<System.DateTime> date)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_AVAILABLE_TIME_SLOTS_BY_TEAM_ID_AND_DATE_Result>("GET_AVAILABLE_TIME_SLOTS_BY_TEAM_ID_AND_DATE", teamIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<GET_DISCOUNT_VOUCHERS_Result> GET_DISCOUNT_VOUCHERS(string voucherCode)
        {
            var voucherCodeParameter = voucherCode != null ?
                new ObjectParameter("VoucherCode", voucherCode) :
                new ObjectParameter("VoucherCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_DISCOUNT_VOUCHERS_Result>("GET_DISCOUNT_VOUCHERS", voucherCodeParameter);
        }
    
        public virtual ObjectResult<GET_LATEST_APPOINTMENT_PROCEEDINGS_Result> GET_LATEST_APPOINTMENT_PROCEEDINGS(Nullable<long> appointmentID, Nullable<int> userTypeID, Nullable<long> appointmentProceedingID)
        {
            var appointmentIDParameter = appointmentID.HasValue ?
                new ObjectParameter("AppointmentID", appointmentID) :
                new ObjectParameter("AppointmentID", typeof(long));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var appointmentProceedingIDParameter = appointmentProceedingID.HasValue ?
                new ObjectParameter("AppointmentProceedingID", appointmentProceedingID) :
                new ObjectParameter("AppointmentProceedingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_LATEST_APPOINTMENT_PROCEEDINGS_Result>("GET_LATEST_APPOINTMENT_PROCEEDINGS", appointmentIDParameter, userTypeIDParameter, appointmentProceedingIDParameter);
        }
    
        public virtual ObjectResult<GET_PATIENT_LAB_TEST_REPORT_Result> GET_PATIENT_LAB_TEST_REPORT(Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string labID, string labTestID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var labIDParameter = labID != null ?
                new ObjectParameter("LabID", labID) :
                new ObjectParameter("LabID", typeof(string));
    
            var labTestIDParameter = labTestID != null ?
                new ObjectParameter("LabTestID", labTestID) :
                new ObjectParameter("LabTestID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATIENT_LAB_TEST_REPORT_Result>("GET_PATIENT_LAB_TEST_REPORT", userIDParameter, startDateParameter, endDateParameter, labIDParameter, labTestIDParameter);
        }
    
        public virtual ObjectResult<GET_PATIENT_LAB_TESTS_Result> GET_PATIENT_LAB_TESTS(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATIENT_LAB_TESTS_Result>("GET_PATIENT_LAB_TESTS", userIDParameter);
        }
    
        public virtual ObjectResult<GET_PATIENT_MEDICINE_DETAILS_BY_ORDER_ID_Result> GET_PATIENT_MEDICINE_DETAILS_BY_ORDER_ID(Nullable<long> patientMedicineOrderID)
        {
            var patientMedicineOrderIDParameter = patientMedicineOrderID.HasValue ?
                new ObjectParameter("PatientMedicineOrderID", patientMedicineOrderID) :
                new ObjectParameter("PatientMedicineOrderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATIENT_MEDICINE_DETAILS_BY_ORDER_ID_Result>("GET_PATIENT_MEDICINE_DETAILS_BY_ORDER_ID", patientMedicineOrderIDParameter);
        }
    
        public virtual ObjectResult<GET_PATIENT_MEDICINE_ORDER_REPORT_Result> GET_PATIENT_MEDICINE_ORDER_REPORT(Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATIENT_MEDICINE_ORDER_REPORT_Result>("GET_PATIENT_MEDICINE_ORDER_REPORT", userIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GET_PATIENT_MEDICINE_ORDERS_Result> GET_PATIENT_MEDICINE_ORDERS(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_PATIENT_MEDICINE_ORDERS_Result>("GET_PATIENT_MEDICINE_ORDERS", userIDParameter);
        }
    
        public virtual ObjectResult<GET_REV_EWS_AND_RATINGS_Result> GET_REV_EWS_AND_RATINGS(Nullable<long> userID, Nullable<int> teamID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_REV_EWS_AND_RATINGS_Result>("GET_REV_EWS_AND_RATINGS", userIDParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<GET_STATISTICS_FOR_PATIENT_PROFILE_Result> GET_STATISTICS_FOR_PATIENT_PROFILE(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_STATISTICS_FOR_PATIENT_PROFILE_Result>("GET_STATISTICS_FOR_PATIENT_PROFILE", userIDParameter);
        }
    
        public virtual ObjectResult<GET_TEAMS_Result> GET_TEAMS(Nullable<int> teamID, string specialityID, string searchQuery)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var specialityIDParameter = specialityID != null ?
                new ObjectParameter("SpecialityID", specialityID) :
                new ObjectParameter("SpecialityID", typeof(string));
    
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_TEAMS_Result>("GET_TEAMS", teamIDParameter, specialityIDParameter, searchQueryParameter);
        }
    
        public virtual ObjectResult<GET_TIME_SLOTS_BY_TEAM_ID_Result> GET_TIME_SLOTS_BY_TEAM_ID(Nullable<long> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_TIME_SLOTS_BY_TEAM_ID_Result>("GET_TIME_SLOTS_BY_TEAM_ID", teamIDParameter);
        }
    
        public virtual ObjectResult<GET_USER_TYPES_Result> GET_USER_TYPES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_USER_TYPES_Result>("GET_USER_TYPES");
        }
    
        public virtual ObjectResult<GET_USERS_Result> GET_USERS(Nullable<int> userTypeID)
        {
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_USERS_Result>("GET_USERS", userTypeIDParameter);
        }
    
        public virtual ObjectResult<LOGIN_USER_Result> LOGIN_USER(string mobileNumber, string password, Nullable<long> userID)
        {
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LOGIN_USER_Result>("LOGIN_USER", mobileNumberParameter, passwordParameter, userIDParameter);
        }
    
        public virtual int MARK_PATIENT_MEDICINE_ORDER_AS_DELIVERED(Nullable<long> patientMedicineOrderID)
        {
            var patientMedicineOrderIDParameter = patientMedicineOrderID.HasValue ?
                new ObjectParameter("PatientMedicineOrderID", patientMedicineOrderID) :
                new ObjectParameter("PatientMedicineOrderID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MARK_PATIENT_MEDICINE_ORDER_AS_DELIVERED", patientMedicineOrderIDParameter);
        }
    
        public virtual ObjectResult<SEARCH_LAB_TESTS_Result> SEARCH_LAB_TESTS(string searchQuery)
        {
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCH_LAB_TESTS_Result>("SEARCH_LAB_TESTS", searchQueryParameter);
        }
    
        public virtual ObjectResult<SEARCH_MEDICINES_Result> SEARCH_MEDICINES(string searchQuery)
        {
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCH_MEDICINES_Result>("SEARCH_MEDICINES", searchQueryParameter);
        }
    
        public virtual ObjectResult<SEARCH_TEAMS_DOCTORS_SPECIALITIES_Result> SEARCH_TEAMS_DOCTORS_SPECIALITIES(string searchQuery)
        {
            var searchQueryParameter = searchQuery != null ?
                new ObjectParameter("SearchQuery", searchQuery) :
                new ObjectParameter("SearchQuery", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SEARCH_TEAMS_DOCTORS_SPECIALITIES_Result>("SEARCH_TEAMS_DOCTORS_SPECIALITIES", searchQueryParameter);
        }
    }
}
